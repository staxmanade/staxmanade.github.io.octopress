<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: I4o | Developing on Staxmanade]]></title>
  <link href="http://staxmanade.com/blog/categories/i4o/atom.xml" rel="self"/>
  <link href="http://staxmanade.com/"/>
  <updated>2014-04-23T11:52:17-07:00</updated>
  <id>http://staxmanade.com/</id>
  <author>
    <name><![CDATA[Jason Jarrett]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Nate's DelegateFactory to Bypass Reflection for Reading Properties. (Speed Up I4o)]]></title>
    <link href="http://staxmanade.com/2009/03/nate-delegatefactory-to-bypass/"/>
    <updated>2009-03-09T00:15:00-07:00</updated>
    <id>http://staxmanade.com/2009/03/nate-delegatefactory-to-bypass</id>
    <content type="html"><![CDATA[<div class='post'>
<p>So today I was perusing my blog list and ran across a blog by Rick Strahl (<a href="http://www.west-wind.com/Weblog/posts/653034.aspx">Dynamic Delegates with Expression Trees</a>) which is referencing this post by Nate Kohari (<a href="http://kohari.org/2009/03/06/fast-late-bound-invocation-with-expression-trees/">Fast Late-Bound Invocation with Expression Trees</a>). </p>  <p>I first just thought it was a very interesting post and thought, “<em>wow, next time I have to do something requiring a ton of reflection method calls I’ll have to remember this”</em>. I took off with the family for the day and sometime during the day the idea popped into my head about trying it to read property’s values (since they are actually just a method call under the hood). And I do have the perfect place to try and spike this idea… </p>  <p>One of the things I’ve done to the i4o library is try to reduce the calls to reflection whenever possible. And the only one left that I couldn’t get past was having to use the PropertyInfo’s GetValue reflection call to get at a value for creating the property index. This generally isn’t a big deal because we only have to do it once, however it makes the initialization of the IndexableCollection&lt;T&gt; fairly expensive.</p>  <p>So I decided to spike the idea of using the DelegateFactory from Nate’s blog to read an object’s property values. And below I’m including the project that I spiked to test this idea out.</p>  <p>It compares how fast we can read values out of an object’s property by first using reflection and second using the dynamic delegate.</p>  <p>If you read Ricks post above, he mentions how the dynamic delegate idea is a little reflection expensive up front. However it only happens once and I ran a couple of tests…(p.s. i noticed a small flaw in my timing, however I don’t want to re-zip &amp; re-upload the spike… so if you see the timing flaw, cool…)</p>  <p>I noticed that after about the first 5000 reads the expense of the heavy up front reflection from DelegateFactory started to become negligent. And the more reads the more powerful the new reading strategy became. Take 1/5 million reads for example… normal reflection reading took .78 seconds, while the delegate reading took only .03 seconds which is a substantial increase.</p>  <p><iframe style="border-right: #dde5e9 1px solid; padding-right: 0px; border-top: #dde5e9 1px solid; padding-left: 0px; padding-bottom: 0px; margin: 3px; border-left: #dde5e9 1px solid; width: 240px; padding-top: 0px; border-bottom: #dde5e9 1px solid; height: 66px; background-color: #ffffff" marginwidth="0" marginheight="0" src="http://cid-c0f357e4555270e7.skydrive.live.com/embedrowdetail.aspx/Public/PropertyReadSpike.zip" frameborder="0" scrolling="no"></iframe></p>  <p>After that I spiked it in the i4o project and proved that this could significantly increase the index build time of the an IndexableCollection&lt;T&gt;. I shelved the spike and am having Aaron take a look at the idea. We’ll see, I haven’t come up with any reasons why this could cause any issues, so it may be included…</p>  </div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I4o: IndexSpecification<T> for the IndexableCollection<T>]]></title>
    <link href="http://staxmanade.com/2008/12/i4o-indexspecification-for/"/>
    <updated>2008-12-25T21:42:00-08:00</updated>
    <id>http://staxmanade.com/2008/12/i4o-indexspecification-for</id>
    <content type="html"><![CDATA[<div class='post'>
<p><span style="font-size:85%;">We've removed the IndexableAttribute from the i4o library and replaced it with the IndexSpecification&lt;T&gt;. Below I'll explain how you can add/remove/change the index for an IndexableCollection&lt;T&gt;.</span></p>  <p><span style="font-size:85%;">Let's show several examples on how to create an IndexableCollection&lt;T&gt;.</span></p>  <p>Given any enumeration of objects you can translate into an IndexableCollection&lt;T&gt;. For the examples below we're going to use an enumeration of the System.IO.FileInfo class. We are going to index the list of FileInfos by file Extension and weather the file IsReadOnly or not.</p>  <h4>Setup the list:</h4>  <pre><span style="color: rgb(0, 128, 0);">// Get our thing to index</span><br /><span style="color: rgb(0, 0, 255);">string</span> dir = @"<span style="color: rgb(139, 0, 0);">C:\Windows\System32\</span>";<br />var fileInfosFromDir = (from f <span style="color: rgb(0, 0, 255);">in</span> System.IO.Directory.GetFiles(dir, "<span style="color: rgb(139, 0, 0);">*.*</span>", SearchOption.AllDirectories)<br />                       select <span style="color: rgb(0, 0, 255);">new</span> FileInfo(f)).ToList();</pre><br /><br /><h4>Can create the IndexSpecification...</h4>...for the FileInfo's "Extension" and "IsReadOnly" properties and turn the list of FileInfos into an IndexableCollection using the IndexSpecification.<br /><br /><pre><span style="color: rgb(0, 128, 0);">// Create the index specification</span><br />var spec = <span style="color: rgb(0, 0, 255);">new</span> IndexSpecification&lt;FileInfo&gt;()<br />   .Add(i =&gt; i.Extension)<br />   .Add(i =&gt; i.IsReadOnly);<br /><br /><span style="color: rgb(0, 128, 0);">// Turn the list of files into an Indexed collection of files</span><br />var indexedFileInfosFromDir = fileInfosFromDir.ToIndexableCollection(spec);</pre><h4>Create IndexableCollection&lt;T&gt; without IndexSpecification&lt;T&gt;:</h4><p>You are not required to specify and IndexSpecification&lt;T&gt; when creating the IndexableCollection&lt;T&gt;. You can translate the list into an IndexableCollection&lt;T&gt; and add properties to index after the fact. EX:</p><pre>var indexedFileInfosFromDir = fileInfosFromDir.ToIndexableCollection();<br /><br /><span style="color: rgb(0, 128, 0);">// Specify the properties to index dynamically (more late bound)</span><br />indexedFileInfosFromDir<br />   .CreateIndexFor(i =&gt; i.Extension)<br />   .CreateIndexFor(i =&gt; i.IsReadOnly);</pre><h4>Swap one IndexSpecification&lt;T&gt; for another:</h4><p>If you want to completely swap out the index at run time, you can give the IndexableCollection a new IndexSpecification</p><pre>var list = <span style="color: rgb(0, 0, 255);">new</span> List&lt;FileInfo&gt;();<br />var indexedList = list.ToIndexableCollection();<br /><br />indexedList.UseIndexSpecification(<br />   <span style="color: rgb(0, 0, 255);">new</span> IndexSpecification&lt;FileInfo&gt;()<br />   .Add(o =&gt; o.Directory)<br />   .Add(o =&gt; o.Name));</pre><p>I think that should cover most of the general cases. Hope this helps...</p></div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>Alex</div>
<div class='content'>
Nice Blog, i recently come to your blog through Google excellent knowledge keep on posting you guys.<br /><br />___________________<br /><a href="http://www.ukdissertations.net/sample_dissertations.htm" rel="nofollow">Dissertation Sample</a><br />___________________</div>
</div>
<div class='comment'>
<div class='author'>marry</div>
<div class='content'>
Blogs are so informative where we get lots of information on any topic. Nice job keep it up!!<br />_____________________________<br /><br /><a href="http://www.ukdissertation.co.uk/dissertation_topics.htm" rel="nofollow">Dissertation Topics</a></div>
</div>
<div class='comment'>
<div class='author'>Satyanarayana Muddu</div>
<div class='content'>
Hi Jason,<br /><br />Thank you for your response.<br />My Xml looks like<br /><br />University1<br />  Course1<br />    Student1<br />    Student2<br />University1<br />  Course2<br />    Student3<br />    Student4<br />University2<br />   Course1<br />     Student5<br />etc...<br /><br />XElement cimXml = XElement.Load(@"C:\Students.xml");<br /><br />So, here I am grouping on Universities.         <br />var universityGroupedElements = from ele in cimXml.Elements() group ele by ele.Name;<br /><br />Now I want to add indexes to University, Course, Student elements to make queries faster.<br /><br />Also, I want to group the courses in each university and also students in each course <br /><br />Please help, in writing some code.</div>
</div>
<div class='comment'>
<div class='author'>Jason.Jarrett</div>
<div class='content'>
Hello @Satyanarayana<br /><br />I would be happy to help you, but have a request and a couple questions...<br /><br />1. I've realized my blog comments are starting to become a bit more of the i4o knowledge base than it deserves. Would you please ask your question over on the i4o Discussion board?<br /><br />2. I'd like a little more detail. What does the xml structure look like? What does the linq query look like that returns your "grouped" data? What is it you are trying to index/search?<br /><br />Thanks,<br />Jason</div>
</div>
<div class='comment'>
<div class='author'>Satyanarayana Muddu</div>
<div class='content'>
I have a question how to use IndexSpecification for a nested collections in a xml file. For example<br />University<br />   Course<br />      Student<br /><br />I have list of Students from a various Courses and various Universities. I used Linq for Grouping Universities and Courses of Students. Now, I have question how to implement Indexing on Students, Courses and Universities.<br />Please give the implementation details .<br /><br />Thanks <br />Satya</div>
</div>
<div class='comment'>
<div class='author'>Paiwan</div>
<div class='content'>
At first, I was thinking of modifying i4o but after I have been testing, I have found the power behind i4o with simple changes the way you write query.<BR/><BR/>For example:  <BR/><BR/>Instead of writing this..<BR/>var f = indexedFileInfosFromDir.Where(fi =&gt; fi.Extension == &quot;txt&quot; &amp;&amp; fi.IsReadOnly == true);<BR/><BR/>Try this..<BR/>var f = indexedFileInfosFromDir.Where(fi =&gt; fi.Extension == &quot;txt&quot;);<BR/>var f2 = f.Where(fi.IsReadOnly == true);<BR/><BR/>(fi.Extension should be smaller group than fi.IsReadOnly)<BR/><BR/>From what I have tested,<BR/>It responses within a few milisecond.<BR/>I am happy with this.<BR/><BR/>Thank you for great work.</div>
</div>
<div class='comment'>
<div class='author'>Jason.Jarrett</div>
<div class='content'>
@Paiwan - I'm glad to see you're running your own benchmarks to test out the library.<BR/><BR/>Please keep in mind that this library is very simple, and is not a complete Linq implementation.<BR/><BR/>It provides some great benefits in the scenarios it was designed for. And I know Aaron has some more improvements on the way.<BR/><BR/>If you create any patches for the project, we are happy to take a look at any improvements you can come up with.<BR/><BR/>Thanks again</div>
</div>
<div class='comment'>
<div class='author'>Paiwan</div>
<div class='content'>
I have found another limitation of i4o and would like to share.<BR/><BR/>From the 'Demoi4o' project.<BR/><BR/>If I change this below query<BR/><BR/>var studentsNamedAaronFromConstant =<BR/>from student in _testStudents<BR/>where student.FirstName == studentNameBox.Text<BR/>select student;<BR/><BR/>To<BR/><BR/>var studentsNamedAaronFromConstant =<BR/>from student in _testStudents<BR/>where student.FirstName.Contains(studentNameBox.Text)<BR/>select student;<BR/><BR/><BR/>It takes longest time!!</div>
</div>
<div class='comment'>
<div class='author'>Paiwan</div>
<div class='content'>
Thanks so much for unit test.</div>
</div>
<div class='comment'>
<div class='author'>Jason.Jarrett</div>
<div class='content'>
@Paiwan To test your question I wrote a unit test and just checked it in. You can view the test here http://i4o.codeplex.com/SourceControl/changeset/view/31862#398075<BR/><BR/>If this is what you were asking, then no it will not update the index.<BR/><BR/>You need to call the  IndexableCollection&lt;T&gt;.Add/Remove and not it&#39;s base type Collection&lt;T&gt;.Add/Remove for the indexes to be updated.<BR/><BR/>This is however something we&#39;d like to support in the future, which is why I checked in the failing test. We probably need to just implement ICollection&lt;T&gt; etc... and to fully support this.</div>
</div>
<div class='comment'>
<div class='author'>Paiwan</div>
<div class='content'>
Hi Jason,<BR/><BR/>I have a question.<BR/>If we have some changes on our base collection like add or delete, do we have to re create index or do some special steps?<BR/><BR/>Thanks,<BR/>Paiwan</div>
</div>
<div class='comment'>
<div class='author'>Kevin</div>
<div class='content'>
Ok, thanks for the confirmation. I wanted to make sure I wasn't crazy. :-)<BR/><BR/>I was excited when I saw your post and really like the syntax for adding properties to the IndexSpecification. Now, I guess I'll just wait until I can actually use it like that. From Aaron's blog, it sounds like he plans to introduce updates to the Where expression in the next release.<BR/><BR/>Thanks for your work on this library. I'm hoping this will make it possible to replace a subsytem of our app which currently relies on looking up factors in large in-memory sets of data by using XML. It loads large XML documents into memory and builds XPath queries to get to individual factors that it needs. The XPath queries themselves are pretty past, but I'm trying to use Linq-to-XML to project the XML into collections of strongly type objects that I can query with Where lambda's instead. It works well, but when the collections are large enough the queries are too much slower than the XPath version. I'm hoping the IndexableCollection will make it possible.<BR/><BR/>Kevin</div>
</div>
<div class='comment'>
<div class='author'>Jason.Jarrett</div>
<div class='content'>
That's a good point and I think you are correct...<BR/><BR/>I was just illustrating the power of the IndexSpecification. Unfortunately the extension methods used to evaluate the expression need some work.</div>
</div>
<div class='comment'>
<div class='author'>Kevin</div>
<div class='content'>
Hi Jason,<BR/><BR/>Thanks for this post. I got to it from the i4o home page on Codeplex. I noticed in the discussions that someone mentioned the fact that if you have multiple expressions in your Where expression, that it won&#39;t use the index.<BR/><BR/>So does that mean, your example showing multiple properties being added to the index doesn&#39;t really help if you wanted to search your collection on both of the properties in the index?<BR/><BR/>For example, would this code use the index?<BR/><BR/>var f = indexedFileInfosFromDir.Where(fi =&gt; fi.Extension == &quot;txt&quot; &amp;&amp; fi.IsReadOnly == true);<BR/><BR/>From my testing, it appears that no benefit is achieved from using an IndexableCollection vs. a regular List in this case. Seems like there&#39;s no point in using the IndexableCollection if you need more than one property in the index. Am I missing something or is that correct?<BR/><BR/>Thanks,<BR/>Kevin</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I4o: Update (Index for Objects)]]></title>
    <link href="http://staxmanade.com/2008/12/i4o-update/"/>
    <updated>2008-12-20T11:10:00-08:00</updated>
    <id>http://staxmanade.com/2008/12/i4o-update</id>
    <content type="html"><![CDATA[<div class='post'>
<p>Recently I was added as a developer to the <a href="http://www.codeplex.com/i4o" target="_blank">i4o codeplex project</a> by <a href="http://blog.magenic.com/blogs/aarone/default.aspx" target="_blank">Aaron</a> and last night I made my first commit.</p>  <p>There were a few pretty big changes to the library. I'll highlight some of them below, and in a couple future posts will describe in a little more detail how you can use these features.</p>  <h4>Removed the IndexableAttribute:</h4>  <p>This was removed for two reasons.</p>  <ul>   <li>It did not allow you index objects you didn't own. </li> </ul>  <p>Say you want to index a collection of System.IO.FileInfo objects. Since that's owned by the .Net framework, you can't apply an attribute to the properties of the class you want to index.</p>  <p>The solution to that was to allow adding indexed properties dynamically, however you had to give it a string representing the property name, which leads into the second issue... </p>  <ul>   <li>Didn't provide any compile time checking or refactor support for properties using the dynamic add/remove methods. </li> </ul>  <p>If you refactored a property and forgot to rename the string to match the refactor you would end up with a runtime error.</p>  <p>To resolve the two issues above I've introduced the <strong>IndexSpecification&lt;T&gt;</strong> (I'll describe how to use it a later post)</p>  <h4>Performance tuning:</h4>  <p>Although we haven't enhanced the Linq support for IndexableCollection (should come soon), I was able to eek some performance by doing some internal caching of property types and a few other tweaks resulting in the Index creation becoming about 30% faster...</p>  <h4>Fluent interface for managing the Indexes</h4>  <p>The last big change which fits in with the IndexSpecification&lt;T&gt; is the Fluent interface for dynamically adding/removing properties to be indexed. One short example could be:</p>  <p><a href="http://lh6.ggpht.com/_L6Vw0x_R3iw/SU1DKLdou8I/AAAAAAAAAD4/JBUBIgkDNNo/s1600-h/image3.png"><img style="border-width: 0px;" alt="image" src="http://lh5.ggpht.com/_L6Vw0x_R3iw/SU1DKcGWDjI/AAAAAAAAAD8/zU7TUvRY2T0/image_thumb1.png?imgmax=800" width="347" border="0" height="217" /></a></p></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I4o & Silverlight Unit Tests (a Little More Work Than the I4o Library)]]></title>
    <link href="http://staxmanade.com/2008/12/i4o-silverlight-unit-tests-little-more/"/>
    <updated>2008-12-07T22:37:00-08:00</updated>
    <id>http://staxmanade.com/2008/12/i4o-silverlight-unit-tests-little-more</id>
    <content type="html"><![CDATA[<div class='post'>
<p>Follow up to my post on <a href="http://staxmanade.com/2008/12/i4o-with-silverlight-compiles-first-try" target="_blank">i4o &amp; Silverlight (compiles first try)</a>...</p>  <p>&#160;</p>  <p>I took a stab at porting the i4o unit tests to <a href="http://silverlight.com/" target="_blank">Silverlight</a> which was quite a bit more work than I initially expected.</p>  <p>After creating a <a href="http://code.msdn.microsoft.com/silverlightut" target="_blank">Silverlight Unit Test</a> project and linking the original test files into the Silverlight project, I compiled...</p>  <ul>   <li>First the VB using statement wasn't even needed, so I removed that. <span style="color: #0000ff">using</span> Microsoft.VisualBasic;       <br /></li>    <li>Second there is no System.Diagnostics.Stopwatch() class in Silverlight, so I basically implemented a quick one using DateTime to get the unit tests to compile in Silverlight. Here's the class, except the Frequency property has been commented out (didn't spend time to figure how to make that correct, or what is correct???) </li> </ul>  <pre><span style="color: #0000ff">public</span> <span style="color: #0000ff">class</span> Stopwatch<br />{<br />   <span style="color: #0000ff">private</span> DateTime _StartUtcDateTime;<br />   <span style="color: #0000ff">private</span> DateTime? _EndUtcDateTime;<br />    <span style="color: #0000ff">private</span> <span style="color: #0000ff">bool</span> _IsRunning = <span style="color: #0000ff">false</span>;<br /><br />    <span style="color: #008000">//public static readonly long Frequency { get { throw new NotImplementedException(); } }</span><br />  <span style="color: #0000ff">public</span> <span style="color: #0000ff">static</span> <span style="color: #0000ff">readonly</span> <span style="color: #0000ff">bool</span> IsHighResolution = <span style="color: #0000ff">false</span>;<br /> <span style="color: #0000ff">public</span> Stopwatch()<br />    {}<br /><br />  <span style="color: #0000ff">public</span> TimeSpan Elapsed<br />   {<br />     <span style="color: #0000ff">get</span><br />       {<br />         <span style="color: #0000ff">if</span> (_EndUtcDateTime.HasValue)<br />         {<br />             <span style="color: #0000ff">return</span> <span style="color: #0000ff">new</span> TimeSpan(_EndUtcDateTime.Value.Ticks - _StartUtcDateTime.Ticks);<br />           }<br />         <span style="color: #0000ff">else</span><br />          {<br />             <span style="color: #0000ff">return</span> <span style="color: #0000ff">new</span> TimeSpan(DateTime.UtcNow.Ticks - _StartUtcDateTime.Ticks);<br />         }<br />     }<br /> }<br /><br />   <span style="color: #0000ff">public</span> <span style="color: #0000ff">long</span> ElapsedMilliseconds { <span style="color: #0000ff">get</span> { <span style="color: #0000ff">return</span> Elapsed.Milliseconds; } }<br />  <span style="color: #0000ff">public</span> <span style="color: #0000ff">long</span> ElapsedTicks { <span style="color: #0000ff">get</span> { <span style="color: #0000ff">return</span> Elapsed.Ticks; } }<br />    <span style="color: #0000ff">public</span> <span style="color: #0000ff">bool</span> IsRunning { <span style="color: #0000ff">get</span> { <span style="color: #0000ff">return</span> _IsRunning; } }<br /><br />    <span style="color: #0000ff">public</span> <span style="color: #0000ff">static</span> <span style="color: #0000ff">long</span> GetTimestamp()<br /> {<br />     <span style="color: #0000ff">return</span> DateTime.Now.Ticks;<br />    }<br /><br />   <span style="color: #0000ff">public</span> <span style="color: #0000ff">void</span> Reset()<br />   {<br />     _EndUtcDateTime = <span style="color: #0000ff">null</span>;<br />       _StartUtcDateTime = DateTime.UtcNow;<br />  }<br /><br />   <span style="color: #0000ff">public</span> <span style="color: #0000ff">void</span> Start()<br />   {<br />     _EndUtcDateTime = <span style="color: #0000ff">null</span>;<br />       _IsRunning = <span style="color: #0000ff">true</span>;<br />        <span style="color: #0000ff">this</span>._StartUtcDateTime = DateTime.UtcNow;<br /> }<br /><br />   <span style="color: #0000ff">public</span> <span style="color: #0000ff">static</span> Stopwatch StartNew()<br />    {<br />     var w = <span style="color: #0000ff">new</span> Stopwatch();<br />      w.Start();<br />        <span style="color: #0000ff">return</span> w;<br /> }<br /><br />   <span style="color: #0000ff">public</span> <span style="color: #0000ff">void</span> Stop()<br />    {<br />     _EndUtcDateTime = DateTime.UtcNow;<br />        _IsRunning = <span style="color: #0000ff">false</span>;<br />   }<br />}</pre><br /><br /><p>The only other issue that came up was some of the Stopwatch dependent tests happened so fast that they would fail intermittently... the quick hack/solution for this was to up the iteration count of whatever they were testing.</p><br /><p>After all the above taking care of all the above issues, I was able to get the unit tests to pass. </p><br /><p><a href="http://lh4.ggpht.com/_L6Vw0x_R3iw/STzAmsr9cuI/AAAAAAAAACU/ImLvor4RNNQ/s1600-h/image%5B4%5D.png"><img style="border-top-width: 0px; border-left-width: 0px; border-bottom-width: 0px; border-right-width: 0px" height="372" alt="image" src="http://lh4.ggpht.com/_L6Vw0x_R3iw/STzAm05AF3I/AAAAAAAAACY/HKajhxLiWtk/image_thumb%5B2%5D.png?imgmax=800" width="367" border="0" /></a></p>  </div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>Tiaan</div>
<div class='content'>
You might also want to look at my implementation of the <A HREF="http://blog.tiaan.com/link/2009/02/03/stopwatch-silverlight" REL="nofollow">Stopwatch for Silverlight</A>, which supports resuming.</div>
</div>
<div class='comment'>
<div class='author'>Tiaan</div>
<div class='content'>
For the Frequency property's implementation, you probably just need to return the System.TimeSpan.TicksPerSecond value.</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I4o With Silverlight (Compiles First Try)]]></title>
    <link href="http://staxmanade.com/2008/12/i4o-with-silverlight-compiles-first-try/"/>
    <updated>2008-12-02T22:48:00-08:00</updated>
    <id>http://staxmanade.com/2008/12/i4o-with-silverlight-compiles-first-try</id>
    <content type="html"><![CDATA[<div class='post'>
<p>So I've been thinking lately of a problem that we will be solving at work that will require a user to follow these steps...</p>  <p>1. User selects some set of data to work with    <br />2. Some number crunching has to happen to give the user a report like interface     <br />3. User analyses that data, tweaks some value and will basically go to step 2 above...</p>  <p>This application is being build with <a href="http://silverlight.com/">Microsoft Silverlight</a> and in thinking about how to make step 2 above as smooth and responsive as possible, I thought &quot;Hey, what about i4o?&quot;</p>  <p>A quick Google for <a href="http://www.google.com/search?rlz=1C1GGLS_en-USUS299US303&amp;sourceid=chrome&amp;ie=UTF-8&amp;q=I4o+silverlight" target="_blank">&quot;i4o Silverlight&quot;</a> and without digging too far I basically found nobody had tried it, or at least tried and told about i4o in Silverlight. So I thought I'd give a go...</p>  <p>&#160;</p>  <p>Step 1: Go get the code from from codeplex/i4o. I downloaded the latest <a href="http://www.codeplex.com/i4o/SourceControl/DownloadSourceCode.aspx?changeSetId=18968" target="_blank">source bits</a>.</p>  <p>Step 2: After extracting the .zip...Open up the project i4o.sln</p>  <p>Step 3: Add a new Silverlight class project</p>  <blockquote>   <p><a href="http://lh3.ggpht.com/_L6Vw0x_R3iw/STYrrIMcDdI/AAAAAAAAAB8/IV4m45c9Xxg/s1600-h/image%5B18%5D.png"><img style="border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px" height="165" alt="image" src="http://lh5.ggpht.com/_L6Vw0x_R3iw/STYrrnDcSrI/AAAAAAAAACA/i9L43771l6o/image_thumb%5B12%5D.png?imgmax=800" width="244" border="0" /></a> </p> </blockquote>  <p>Step 4: Now use the &quot;Add existing item&quot; option to add files to the Silverlight project. Browse to the i4o project folder to select the 3 i4o class files. You can add those to you Silverlight project as is or use the &quot;Add as Link&quot; feature to share the code across the platforms.</p>  <p><a href="http://lh4.ggpht.com/_L6Vw0x_R3iw/STYrsCqRHuI/AAAAAAAAACE/zyiseYEqdk0/s1600-h/image%5B17%5D.png"><img style="border-right: 0px; border-top: 0px; border-left: 0px; border-bottom: 0px" height="183" alt="image" src="http://lh4.ggpht.com/_L6Vw0x_R3iw/STYrs8EynfI/AAAAAAAAACI/pazWy0Tu47o/image_thumb%5B11%5D.png?imgmax=800" width="244" border="0" /></a>&#160;</p>  <p>Step 5: once you've add the files to the Silverlight project final step is to &quot;BUILD&quot; the solution...</p>  <p>What's that you say? &quot;That's all there was to it?&quot; YA, my thoughts exactly, the project just compiled on the first try...</p>  <p>&#160;</p>  <p>DISCLAIMER: I haven't tried to use it yet... It's late and this idea popped into my head distracting me from getting to sleep. So I tried it and am quite satisfied for now.</p>  <p>&#160;</p>  <p>Up NEXT: Don't know if I'll do this sooner than later, if at all, but figure out how hard it would be to port the existing unit tests to see how they run in Silverlight...</p>  </div>

]]></content>
  </entry>
  
</feed>
