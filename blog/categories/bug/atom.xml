<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Bug | Developing on Staxmanade]]></title>
  <link href="http://staxmanade.github.io/blog/categories/bug/atom.xml" rel="self"/>
  <link href="http://staxmanade.github.io/"/>
  <updated>2014-04-02T08:56:35-07:00</updated>
  <id>http://staxmanade.github.io/</id>
  <author>
    <name><![CDATA[Jason Jarrett]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[TFS Bisect the Manual Way (When Was That Bug Introduced?)]]></title>
    <link href="http://staxmanade.github.io/blog/2012/10/tfs-bisect-manual-way-when-was-that-bug/"/>
    <updated>2012-10-19T08:12:00-07:00</updated>
    <id>http://staxmanade.github.io/blog/2012/10/tfs-bisect-manual-way-when-was-that-bug</id>
    <content type="html"><![CDATA[<div class='post'>
I’d like to share a powerful workflow I originally found using <a href="http://git-scm.com/" target="_blank">git</a> and its powerful git-bisect command and how I’ve leveraged the idea when using <a href="http://msdn.microsoft.com/en-us/vstudio/ff637362.aspx" target="_blank">TFS</a>.<br /><h4>What is a bisect on your source history?</h4><a href="http://www.kernel.org/pub/software/scm/git/docs/git-bisect.html" target="_blank">Git’s bisect</a> command is extremely powerful and I won’t be covering it here. However git describes its feature as a way to:<br /><blockquote>Find by binary search the change that introduced a bug</blockquote><h4>Why do I need to look through source code history to find why a bug was introduced?</h4>It’s true, that many bugs are so basic that once you hear about the bug you immediately understand where it is, why it’s broken and how to fix. In that scenario this approach is not something you need. <br />However, <strong>if you know a bug was introduced sometime in the past but are not sure when or how it was introduced</strong>, I think we could all agree that doing a binary search through the history of your code’s changes is a pretty good approach to finding the specific change-set that introduced a bug. Once you have a handle on the specific code change that was made, it becomes much easier to understand how it changed and track down the reason a bug was introduced and how to fix it.<br /><h4>High level steps/concept:</h4><ol><li>First you should have discovered a reproducible bug </li><li>Next we have to find a commit in the past where we know the bug does not exist. (Say you know that 3 weeks ago, this bug didn’t exist.) </li><li>Now, from that “good” commit we do a binary search through source history to find when the bug was first introduced. Noting at each commit its goodness/badness state and continuing with the search until we’ve found the commit when the bug was introduced. </li><li>Analyze the commit until you understand what and how the bug was introduced and fix it. </li></ol><h4>One manual approach to TFS bisect.</h4>There is not a built-in feature with TFS (that I’m aware of) and leaves us with some manual bookkeeping that we wouldn’t have to do if we were using git. <br /><blockquote>Side Note: If you’re familiar with git, I’d recommend just using <a href="https://github.com/git-tfs/git-tfs" target="_blank">git-TFS</a> or the new <a href="http://gittf.codeplex.com/" target="_blank">git-tf</a> tool and just clone your TFS repro and use git-bisect to accomplish these steps.</blockquote>Let’s assume you can find a commit in the past that you know doesn’t have the bug.<br />Load up PowerShell and <a href="http://elegantcode.com/2011/07/16/slightly-modified-cd-command-for-powershell/" target="_blank">CD</a> into the root of your project directory. Execute a tf.exe command to pull a string output of your history into the clipboard. We’ll leverage this in our bookkeeping.<br /><blockquote><span style="background-color: white;">I’m using PowerShell and have tf.exe on my %PATH%.</span><br /><span style="background-color: white;">&gt;tf history ./* /recursive /noprompt | clip</span></blockquote>Notice the pipe to the ‘clip’ command at the end of the TF call. This places the output of one command into the clipboard. <br />Let’s say the above command places the following into our clipboard.<br />[gist id=0373efef1f0150ed7faf]<br />Take the output of the command (that is now in your clipboard) and paste it into Excel (or notepad) wherever you want to keep track of your work.<br />We know that at commit ID #13 the bug did not exist. Let’s mark it as ‘<span style="background-color: lime;">good</span>’<br /><a href="http://lh5.ggpht.com/-CvxFQzakVbw/UIFt0e8qZ2I/AAAAAAAAAZ4/RqGJBajGPe8/s1600-h/image27.png"><img alt="image" border="0" height="113" src="http://lh5.ggpht.com/-kXlKM8aP2mI/UIFt0yqg9JI/AAAAAAAAAaA/6dgGmI4QOpg/image_thumb13.png?imgmax=800" style="background-image: none; border-bottom-width: 0px; border-left-width: 0px; border-right-width: 0px; border-top-width: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="image" width="750" /></a><br />Now we start our binary search through the different commits to find our bug.<br />Find a midway commit between this commit (#13) and the most recent commit (#79).<br />You don’t have to be all mathematical about the binary search, I tend to just eyeball the ‘middle’ and go from there. But you’re more than welcome to execute the binary search perfectly. <img alt="Smile" class="wlEmoticon wlEmoticon-smile" src="http://lh3.ggpht.com/-3eas7euoVvs/UIFt2DctXqI/AAAAAAAAAaI/eKGufXLAKlU/wlEmoticon-smile2.png?imgmax=800" style="border-bottom-style: none; border-left-style: none; border-right-style: none; border-top-style: none;" /><br />Now use your TFS tools to checkout this specific version. In this case we’ll checkout commit #46.<br />I tend to prefer the command line to check out the specific version as it’s easier to repeat these steps with commands and we already have the command open from earlier.<br /><blockquote>&gt;tf get ./* /recursive /force /overwrite /version:46</blockquote>Or you can use the GUI to get a specific version.<br /><a href="http://lh3.ggpht.com/-OMvvDEn3-X8/UIFt2XesHqI/AAAAAAAAAaQ/Tt_AxEmJGX0/s1600-h/image11.png"><img alt="image" border="0" height="143" src="http://lh3.ggpht.com/-qf-BMFlUVw4/UIFt3AoNTqI/AAAAAAAAAaY/NFM5bEn63ns/image_thumb5.png?imgmax=800" style="background-image: none; border-bottom-width: 0px; border-left-width: 0px; border-right-width: 0px; border-top-width: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="image" width="253" /></a><br /><a href="http://lh5.ggpht.com/-3oweq7xMXqM/UIFt4kthkoI/AAAAAAAAAag/aNDmXsNf3gk/s1600-h/image19.png"><img alt="image" border="0" height="308" src="http://lh4.ggpht.com/-Grq1CtfWikA/UIFt47L3zpI/AAAAAAAAAao/ZXyRbh3-2Ao/image_thumb9.png?imgmax=800" style="background-image: none; border-bottom-width: 0px; border-left-width: 0px; border-right-width: 0px; border-top-width: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="image" width="585" /></a><br />With version #46 checked out, we run our tests and find that the bug exists here. Mark it as ‘<span style="color: red;">bad</span>’ to signify the bug is here.<br /><a href="http://lh6.ggpht.com/-FzkYtFf-TGM/UIFt5ffnYdI/AAAAAAAAAaw/8Ao7cBlIPeA/s1600-h/image23.png"><img alt="image" border="0" height="74" src="http://lh5.ggpht.com/-YPe9c_3-C2c/UIFt57-Q1UI/AAAAAAAAAa4/_A64INotcRk/image_thumb11.png?imgmax=800" style="background-image: none; border-bottom-width: 0px; border-left-width: 0px; border-right-width: 0px; border-top-width: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="image" width="777" /></a><br />Now we can continue our binary search between commit 13 and 46 until we narrow down the exact commit where the bug first shows up.<br /><a href="http://lh6.ggpht.com/-Z7QrMkL_0I4/UIFt6c3XKpI/AAAAAAAAAbA/9ibPBgIXkk8/s1600-h/image40.png"><img alt="image" border="0" height="680" src="http://lh5.ggpht.com/-wPRYPnuhc1k/UIFt69bg1aI/AAAAAAAAAbI/TcWeM26jji4/image_thumb20.png?imgmax=800" style="background-image: none; border-bottom-width: 0px; border-left-width: 0px; border-right-width: 0px; border-top-width: 0px; display: inline; padding-left: 0px; padding-right: 0px; padding-top: 0px;" title="image" width="691" /></a><br />As you can see by the numbers to the left in the screenshot above, it took us 5 checkouts to find the commit where the bug was introduced.<br />Now the rest is up to you. I tend to spend time looking at the diff and understanding why the specific commit introduces the bug. If you keep the size of your regular commits small then it tends to be pretty easy to understand why the bug was introduced and how to fix it.<br /><strong>Don’t forget to ‘get latest’ before you try to do much work so you’re not stuck with your source code way back in time.</strong><br /><h4>These steps should be automated.</h4>It’s true the bookkeeping should be done for us by a tool, and in fact I started writing a PowerShell implementation of this, but never finished and didn’t find it worth my time. The manual approach works well, and it’s not something I have to use often. However, I did find someone who’s written a tool that looks promising.<br /><blockquote><a href="http://gr3dman.name/blorg/posts/2010-12-03-tf-bisect.html">http://gr3dman.name/blorg/posts/2010-12-03-tf-bisect.html</a></blockquote><br />Happy bug hunting.</div>

]]></content>
  </entry>
  
</feed>
