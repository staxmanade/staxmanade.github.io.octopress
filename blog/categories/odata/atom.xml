<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: OData | Developing on Staxmanade]]></title>
  <link href="http://staxmanade.com/blog/categories/odata/atom.xml" rel="self"/>
  <link href="http://staxmanade.com/"/>
  <updated>2014-04-29T11:48:46-07:00</updated>
  <id>http://staxmanade.com/</id>
  <author>
    <name><![CDATA[Jason Jarrett]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[What’s Happening on the NuGet Feed (Leveraging OData in an RSS Reader)]]></title>
    <link href="http://staxmanade.com/2011/09/whats-happening-on-nuget-feed/"/>
    <updated>2011-09-27T07:09:00-07:00</updated>
    <id>http://staxmanade.com/2011/09/whats-happening-on-nuget-feed</id>
    <content type="html"><![CDATA[<div class='post'>
<p>Ever since <a href="http://nuget.org/" target="_blank">NuGet</a> came online I’ve been wanting a way to find out about new packages, and updates to packages.</p>  <p>Since <a href="http://www.odata.org/" target="_blank">OData</a> extends the <a href="http://www.ietf.org/rfc/rfc4287.txt" target="_blank">ATOM</a> feed and you can hook an OData feed up to any RSS reader I set out to find a way to get at those recent updates to the NuGet feed and find out when new packages were published.</p>  <p>If you’re not completely familiar with OData, later in this post I explain how I arrived at the URL below. However, if you don’t care how I arrived at the solution, below is the final RSS link I’m currently using in my RSS reader (Google Reader) to monitor updates to the NuGet feed.</p>  <blockquote>   <p><a href="http://packages.nuget.org/v1/FeedService.svc/Packages()?$filter=Id%20ne%20'SymbolSource.TestPackage'&amp;$orderby=Published%20desc">http://packages.nuget.org/v1/FeedService.svc/Packages()?$filter=Id%20ne%20'SymbolSource.TestPackage'&amp;$orderby=Published%20desc</a></p> </blockquote>  <h4>How did I discover or build that URL?</h4>  <p>I could have memorized the <a href="http://www.odata.org/developers/protocols/uri-conventions">OData URI spec</a> and constructed the above link by hand but I’m far more familiar with C# and LINQ and instead used <a href="http://www.linqpad.net/">LINQPad</a>.</p>  <p>Open up LINQPad and add a WCF Data Services (OData) connection to the following URL</p>  <blockquote>   <p><a href="http://packages.nuget.org/v1/FeedService.svc">http://packages.nuget.org/v1/FeedService.svc</a></p> </blockquote>  <p>Now You can query the OData feed with some LINQ.</p>  <blockquote>   <p>from p in Packages      <br />where p.Id != &quot;SymbolSource.TestPackage&quot;       <br />orderby p.Published descending       <br />select p</p> </blockquote>  <p>When you execute this LINQ query in LINQPad, you can click on the “SQL” in the results pane to view the URL that was generated to execute the operation.</p>  <p>Now my original linq expression didn’t have the <u>where p.Id != &quot;SymbolSource.TestPackage&quot;</u> as I didn’t know this package would become a regular pain to view in the RSS Reader.</p>  <p>One great thing about OData is the ability to re-craft the URL for this feed to ignore items that either show up so much that I want to exclude them (like the “SymbolSource.TestPackage”) or a certain class of items that I just don’t want to be alerted on (maybe filtering by the NuGet Tag property).</p>  <h4>Some observations of the feed.</h4>  <p>I’ve been monitoring this feed for almost a month now and have learned about some very interesting projects, check the next section of this post with a list of some of the more interesting ones (to me) that I’ve found. </p>  <p>So far the feed has become just a regular part of my daily blog reading. It’s the quickest one to do as I’m typically skimming the titles of the RSS items and only slowing down to dig into projects I’ve never heard and sound interesting.</p>  <p>Google Reader trends that this feed generates about 54 items a day. Which may seem like a lot, but it’s really easy to click the “mark all as read” button and go on with the day.<a href="http://lh4.ggpht.com/-XUsrxaG8wXs/ToHZKwn3O4I/AAAAAAAAARo/JYWHnb03aLc/s1600-h/image9.png"><img style="background-image: none; border-right-width: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://lh4.ggpht.com/-SsuwC_xx4Bk/ToHZLMw-2oI/AAAAAAAAARs/YW-Bk2zGg0k/image_thumb5.png?imgmax=800" width="587" height="87" /></a></p>  <h4>Interesting projects I’ve discovered.</h4>  <p>I’ve been watching this RSS feed for almost 2 weeks now, and have discovered some new projects (at least new to me) and learned about updates to projects I already knew about.</p>  <p>Below is a small list of ones I thought were interesting – there’s way more being done out there.</p>  <h5>New to me</h5>  <ul>   <li><a href="http://nuget.org/List/Packages/OpenCover" target="_blank">OpenCover</a> </li>    <li><a href="http://nuget.org/List/Packages/nji" target="_blank">NodeJs (Package) Installer</a> </li>    <li><a href="http://nuget.org/List/Packages/SignalR" target="_blank">SignalR</a> </li>    <li><a href="http://nuget.org/List/Packages/FastActivator" target="_blank">FastActivator</a> (this one feels like it could be a single .cs file instead of a full assembly – but then I guess you couldn’t leverage it in say a VB or F# project) </li>    <li><a href="http://nuget.org/List/Packages/EasyHttp" target="_blank">EasyHttp</a> </li>    <li><a href="http://nuget.org/List/Packages/SheepAspect">SheepAspect</a> </li> </ul>  <h5>NOT new to me (but released while I was watching)</h5>  <ul>   <li><a href="http://nuget.org/List/Packages/SassAndCoffee" target="_blank">SassAndCoffee</a> </li>    <li><a href="http://nuget.org/List/Packages/FubuMVC">FubuMVC</a> </li>    <li><a href="http://nuget.org/List/Packages/Bottles">Bottles</a> </li>    <li><a href="http://nuget.org/List/Packages/StatLight" target="_blank">StatLight</a> (Ya I know it’s my project – but good verification that when I released the project – it showed up in my <u>RSS </u>reader.) <img style="border-bottom-style: none; border-left-style: none; border-top-style: none; border-right-style: none" class="wlEmoticon wlEmoticon-smile" alt="Smile" src="http://lh3.ggpht.com/-jgUk-cdtfpU/ToHZLfUUubI/AAAAAAAAARw/lPMBrU8QmB8/wlEmoticon-smile2.png?imgmax=800" /> </li> </ul>  <h4>Could NuGet be a new metric for what’s popular or up and coming?</h4>  <p>That heading is a little bolder than what I actually think, mostly because there are far too many variables to make that statement hold a strong footing. Regardless, I have noticed some interesting “trends” (if you can define a trend by my watching the feed for about a month) in what is being released on NuGet and wonder if watching this over time will be a nice window in to the types of projects people are really working on.</p>  <p>I’ve seen quite a few projects related to messaging or <a href="http://martinfowler.com/eaaDev/EventSourcing.html" target="_blank">Event Sourcing</a>. And a number of different JS and CSS minification/build tooling projects.</p>  </div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>Thomas Ardal</div>
<div class='content'>
Thanks for sharing. I wasn&#39;t aware, that existing RSS readers would actually be able to understand OData, even though it&#39;s an extension to Atom.<br /><br />By the way, there&#39;s already a project for watching NuGet packages through RSS here: <a href="http://nugetfeed.org" rel="nofollow">NuGetFeed.org</a>.<br /><br />With NuGetFeed.org you will be able to follow your favorite NuGet packages through RSS. There&#39;s a feature called MyFeed, where you will be able to add a list of packages you want to follow. If you use Google Chrome, there&#39;s an extension as well and finally a Visual Studio add-in is also available. Hope you will find NuGetFeed.org useful.</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OData’s DataServiceQuery and Removing the .Expand(“MagicStrings”) –Part II]]></title>
    <link href="http://staxmanade.com/2010/10/odatas-dataservicequery-and-removing/"/>
    <updated>2010-10-17T17:56:00-07:00</updated>
    <id>http://staxmanade.com/2010/10/odatas-dataservicequery-and-removing</id>
    <content type="html"><![CDATA[<div class='post'>
<p>In a <a href="http://staxmanade.com/2010/09/odatas-dataservicequery-and-removing" target="_blank">previous post</a> I elaborated on the problem of magic strings in <a href="http://www.odata.org/" target="_blank">OData</a> service queries, and gave a quick (but lacking in depth) statically typed helper solution.</p>  <p>A commenter <a href="http://elegantcode.com/2010/09/21/odatas-dataservicequery-and-removing-the-expandmagicstrings/#comment-58997">mynkow</a> left a note stating that my solution would not work with nested objects. I initially replied asking if he could give an example (as I hadn’t run into that scenario yet being a noob to OData). He didn’t get back to me, but it wasn’t long before I ran into the problem he was talking about.</p>  <p>If we go back to <a href="http://www.linqpad.net/">LinqPad</a> and look again at the Netflix OData api. Let’s say we want to pull down the <strong>People</strong>, their related <strong>TitlesDirected</strong> and the TitlesDirected <strong>ScreenFormats</strong>. (No real world scenario there – just made it up because they’re related properties). The OData query (with magic strings) would look like:</p>  <blockquote>   <p><font face="Courier New">(from x in People.Expand(&quot;TitlesDirected/ScreenFormats&quot;)        <br />select x).Take(5)</font></p> </blockquote>  <p>If you tried to take the above and translate it to my “no magic string” fix from the previous post you would get something like.</p>  <blockquote>   <p><font face="Courier New">(from x in People.Expand(p =&gt; p.TitlesDirected /* Now what? dead end. /ScreenFormats*/ )        <br />select x).Take(5)         <br /></font></p> </blockquote>  <p>Now that the problem in my solution was apparent, and using his example as a quick guide (It wasn’t quite what I was looking for, but had the general theme). The solution became more than a few lines of code and I wanted to wrap some tests around the whole thing just to verify it was all working correctly…</p>  <h4>ODataMuscle was born:</h4>  <p><a href="http://github.com/Staxmanade/ODataMuscle">http://github.com/Staxmanade/ODataMuscle</a></p>  <p>Sorry for the name. Just think of “Strong Typing” your OData queries and giving them a little Muscle. I threw this little project up on github since this blog is not the best place to version code and if anyone felt inclined to extend it they could easily fork it and do so.</p>  <p>I hacked the initial version together, and once a co-worker of mine was done with it I think he cleaned it up nicely.</p>  <p>This new version now supports expanding not only <strong>child properties</strong>, but <strong>grandchild properties</strong> and <strong>grandchild properties of collections</strong>. (That doesn’t seem to translate well…)</p>  <p>EX: our little Netflix example from above would now look like </p>  <blockquote><font face="Courier New">(from x in People.Expand(p =&gt; p.TitlesDirected.Expand(p2 =&gt; p2.ScreenFormats))      <br />select x).Take(5)</font></blockquote>  <p>Which would translate into the following query</p>  <blockquote>   <p><a title="http://odata.netflix.com/catalog/People()?$top=5&amp;$expand=TitlesDirected/ScreenFormats" href="http://odata.netflix.com/catalog/People()?$top=5&amp;$expand=TitlesDirected/ScreenFormats">http://odata.netflix.com/catalog/People()?$top=5&amp;$expand=TitlesDirected/ScreenFormats</a></p> </blockquote>  <p>Thanks to <a href="http://elegantcode.com/2010/09/21/odatas-dataservicequery-and-removing-the-expandmagicstrings/#comment-58997">mynkow</a> for the initial feedback and I hope this helps someone else…</p>  </div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OData’s DataServiceQuery and Removing the .Expand(“MagicStrings”)]]></title>
    <link href="http://staxmanade.com/2010/09/odatas-dataservicequery-and-removing/"/>
    <updated>2010-09-21T06:52:00-07:00</updated>
    <id>http://staxmanade.com/2010/09/odatas-dataservicequery-and-removing</id>
    <content type="html"><![CDATA[<div class='post'>
<p>I was experimenting recently with the .Net implementation of <a href="http://www.odata.org/" target="_blank">OData</a> and ran across one of my pet peeves. “Magic Strings”. Apparently, the .Net community’s definition of magic strings is close but seems slightly different from <a href="http://en.wikipedia.org/wiki/Magic_string_(programming)" target="_blank">Wikipedia</a>. Therefore the magic strings I’m talking about here are what you’ll find on such posts as “<a href="http://codebetter.com/blogs/matthew.podwysocki/archive/2009/03/19/functional-net-lose-the-magic-strings.aspx" target="_blank">Functional .Net – Lose the Magic Strings</a>.”</p>  <p>I don’t want to get into the magic string debate here, just that I want to snapshot this little helper (for when I need to remember to write it again and don’t want to “figure it out”). This is also not intended to be a complete overview of OData, but I will provide some getter starter links and tips (if you haven’t touched it).</p>  <h4>Enough background show me the code: (scroll to the bottom if you don’t care about the post)</h4>  <p>Let’s pretend we want to request a “Title” from the NetFlix OData api.</p>  <p>You can do this by going to the web browser and typing the following URL</p>  <blockquote>   <p><a title="http://odata.netflix.com/catalog/Titles()?$top=1" href="http://odata.netflix.com/catalog/Titles()?$top=1">http://odata.netflix.com/catalog/Titles()?$top=1</a></p> </blockquote>  <p>Sweet. XML, yippie. Um, no thanks. Let’s try that again. Go download <a href="http://www.linqpad.net/" target="_blank">LinqPad</a> (read up on using <a href="http://coderjournal.com/2010/06/using-linqpad-to-query-stack-overflow/" target="_blank">LinqPad for querying an OData</a> store)</p>  <p>Once you’ve connected LinqPad to the NetFlix OData service (<a title="http://odata.netflix.com/catalog/Titles()?$top=1" href="http://odata.netflix.com/catalog">http://odata.netflix.com/catalog</a>). Now we’re ready to play around. Our URL “query” above translates in to a C# LINQ statement that looks like the below in LinqPad.</p>  <pre class="brush: csharp;">(from title in Titles<br />select title).Take(1).Dump()</pre><br /><br /><blockquote><br />  <p>The<strong> .Dump()</strong> is a LinqPad extension method that displays the object in the results window.</p><br /></blockquote><br /><br /><p>If you execute this in LinqPad you will see some data about the first Title form the Netflix OData service. In the results window scroll all the way to the right. Notice all the properties that are supposed to be a Collection&lt;T&gt; but have no data? To retrieve these through OData you have to extend your LINQ query with the Expand(“{propertyName}”) method. </p><br /><br /><p>Let’s say we want to include AudioFormats collection when we ask for the first Title.</p><br /><br /><pre class="brush: csharp;">(from title in Titles.Expand(&quot;AudioFormats&quot;)<br />select title).Take(1).Dump()</pre><br /><br /><p>Notice how we have to explicitly tell the OData service to include this property when we retrieve it form the service. Not only do we explicitly tell the property name, but it’s a magic string (gag, hack, baaa) none the less. If you click on “SQL” in LinqPad result window it will show the URL used for OData queries. Our URL shows the expanded property. </p><br /><br /><blockquote><a title="http://odata.netflix.com/catalog/Titles()?$top=1&amp;$expand=AudioFormats&#13;&#10;" href="http://odata.netflix.com/catalog/Titles()?$top=1&amp;$expand=AudioFormats">http://odata.netflix.com/catalog/Titles()?$top=1&amp;<strong>$expand=AudioFormats</strong> <br /><br />    <br /></a></blockquote><br /><br /><p>Now let’s pretend (just for the sake of pretending) that your front end application’s entire data access strategy was going to sit on top of OData. Not saying this is a good thing (or a bad thing). Just sayin…</p><br /><br /><p>If you have a fairly complex data model and each screen in your application requests slightly different data in a slightly different way, but in the end it all essentially comes down to a set of entities and their relationships. What would you do if you had to “.Expand” all those magic stringed property names. Now, I know we’re all great at search and replace (of the magic strings). However every little step along the way where I can avoid a refactor that will break every other screen in the app, well, I think I just might take that.</p><br /><br /><p>Now, if you change your LinqPad query from a “C# Expression” to a “C# Program”. Copy the helper class at the bottom of this post in to the bottom of the LinqPad code window. You can now write your linq statement as follows</p><br /><br /><pre class="brush: csharp;">(from title in Titles.Expand(x=&gt; x.AudioFormats)<br />select title).Take(1).Dump();</pre><br /><br /><p>Notice the switch from magic strings to an intellisense helping, refactoring safe lambda? This trick is not new. You’ll see it in many .Net open source projects such as mocking frameworks, asp.net MVC projects etc…</p><br /><br /><p>Just wanted to write this little goodie down for the next time I need it. Hope this helps someone else as well.</p><br /><br /><pre class="brush: csharp;">public static class ServiceQueryExtension<br />{<br />    public static DataServiceQuery&lt;T&gt; Expand&lt;T, TProperty&gt;(<br />        this DataServiceQuery&lt;T&gt; entities, <br />        Expression&lt;Func&lt;T, TProperty&gt;&gt; propertyExpressions)<br />    {<br />        string propertyName = propertyExpressions.GetMemberName();<br />        return entities.Expand(propertyName);<br />    }<br /><br />    public static string GetMemberName&lt;T, TProperty&gt;(this Expression&lt;Func&lt;T, TProperty&gt;&gt; propertyExpression)<br />    {<br />        return ((MemberExpression)(propertyExpression.Body)).Member.Name;<br />    }<br />}</pre>  </div>

]]></content>
  </entry>
  
</feed>
