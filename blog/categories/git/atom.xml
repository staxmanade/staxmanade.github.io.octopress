<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | Developing on Staxmanade]]></title>
  <link href="http://staxmanade.github.io/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://staxmanade.github.io/"/>
  <updated>2014-04-07T08:52:43-07:00</updated>
  <id>http://staxmanade.github.io/</id>
  <author>
    <name><![CDATA[Jason Jarrett]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rake, Psake, Grunt, Gulp, Jake, Make, Cake, Brunch, Ant, Bash, Maven, or Fabric. As Long as You putOnAHelmet]]></title>
    <link href="http://staxmanade.github.io/2014/03/rake-psake-grunt-gulp-jake-make-cake/"/>
    <updated>2014-03-01T21:41:00-08:00</updated>
    <id>http://staxmanade.github.io/2014/03/rake-psake-grunt-gulp-jake-make-cake</id>
    <content type="html"><![CDATA[<div class='post'>
<p>A standard task I began placing in my projects lately is one that easily integrates with my build tool of choice (rake, psake, etc&#8230;) and when run, installs a git pre-commit hook into my local copy of the repo that will run tests before code is committ. I&#8217;ve fancied calling the task <em><a href="https://github.com/staxmanade/PutOnAHelmet">putOnAHelmet</a></em>.</p> <p>Come checkout a small <a href="https://github.com/staxmanade/PutOnAHelmet">little github repo </a> I started to keep track of various versions of this and feel free to open an issue or send a pull request with another one!</p> <p>I don&#8217;t want to get into details about pre-commit hooks and how you should author them in this post (maybe we can expand the language in the repo&#8217;s readme&#8230;). You can also check <a href="http://bit.ly/1bit9Pe">out other writings</a>&#8230; But one of the biggest problems I have with them is gits in-ability to easily keep track of pre-commit hooks much like it can with the rest of the projects source. </p> <p>Now it&#8217;s true that different people need the ability to customize these, but a general &#8220;running of tests&#8221; before committing is a great first step and I&#8217;ve found these set of tasks the easiest way to carry them from repo to repo.</p> <p>Hope others find this useful!</p> <p>Happy committing!</p></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Segregate Your Code Commits Into Tiny Topical Changes.]]></title>
    <link href="http://staxmanade.github.io/2014/02/segregate-your-code-commits-into-tiny/"/>
    <updated>2014-02-17T10:25:00-08:00</updated>
    <id>http://staxmanade.github.io/2014/02/segregate-your-code-commits-into-tiny</id>
    <content type="html"><![CDATA[<div class='post'>
<div style="color: #333333; font-family: Georgia, 'Times New Roman', 'Bitstream Charter', Times, serif; font-size: 13px; line-height: 19px;">If your not using source control for your coding projects, get off my lawn. :P (#JustHadToSayIt)</div><div style="color: #333333; font-family: Georgia, 'Times New Roman', 'Bitstream Charter', Times, serif; font-size: 13px; line-height: 19px;">Now that I'm only reaching people who use source control (serious developers), I'd like to ask that you focus hard to only commit changes that belong to a single topic at a time. Think&nbsp;<a data-mce-href="http://en.wikipedia.org/wiki/Single_responsibility_principle" href="http://en.wikipedia.org/wiki/Single_responsibility_principle" target="_blank">SRP</a>&nbsp;for code commits/check-ins.</div><h4 style="color: #333333; font-family: Georgia, 'Times New Roman', 'Bitstream Charter', Times, serif; font-size: 13px; line-height: 19px;">What is a topical commit?</h4><div style="color: #333333; font-family: Georgia, 'Times New Roman', 'Bitstream Charter', Times, serif; font-size: 13px; line-height: 19px;">That almost looks like 't<strong>r</strong>opical' and wouldn't it be nice to be in a tropical place doing commits to your code, but I digress...</div><div style="color: #333333; font-family: Georgia, 'Times New Roman', 'Bitstream Charter', Times, serif; font-size: 13px; line-height: 19px;">The topics I'm referring to are specific functional units of change where each tiny commit is related to a single topic or theme.</div><div style="color: #333333; font-family: Georgia, 'Times New Roman', 'Bitstream Charter', Times, serif; font-size: 13px; line-height: 19px;">For example:</div><ul style="color: #333333; font-family: Georgia, 'Times New Roman', 'Bitstream Charter', Times, serif; font-size: 13px; line-height: 19px;"><li>adding feature X</li><li>refactoring</li><li>bug fix</li><li>spelling fix</li><li>Updating comments/documentation</li><li><strong>*** code formatting ***</strong></li></ul><div style="color: #333333; font-family: Georgia, 'Times New Roman', 'Bitstream Charter', Times, serif; font-size: 13px; line-height: 19px;">I highlighted that last one for a reason as it's the impetus for writing this post.</div><h3 style="color: #333333; font-family: Georgia, 'Times New Roman', 'Bitstream Charter', Times, serif; line-height: 19px;">Don't mix topics/themes within a single commit!</h3><div style="color: #333333; font-family: Georgia, 'Times New Roman', 'Bitstream Charter', Times, serif; font-size: 13px; line-height: 19px;">Instead break them into multiple commits. If you're using git, checkout '<a data-mce-href="http://johnkary.net/blog/git-add-p-the-most-powerful-git-feature-youre-not-using-yet/" href="http://johnkary.net/blog/git-add-p-the-most-powerful-git-feature-youre-not-using-yet/" target="_blank">git add -p</a>'</div><div style="color: #333333; font-family: Georgia, 'Times New Roman', 'Bitstream Charter', Times, serif; font-size: 13px; line-height: 19px;">If you have a one line bug fix but the file has 20 lines of code formatting changes (you know who you are). It makes determining what the bug fix is nearly impossible from the changes that are code formatting.</div><div style="color: #333333; font-family: Georgia, 'Times New Roman', 'Bitstream Charter', Times, serif; font-size: 13px; line-height: 19px;">Using tools like git bisect to look at history become difficult. Pull Requests in GitHub become difficult to understand. If you've left a codebase for a while and come back, try reading changes that have happened over time to get caught up can be extremely difficult to do if your commits are not topically based.</div><div style="color: #333333; font-family: Georgia, 'Times New Roman', 'Bitstream Charter', Times, serif; font-size: 13px; line-height: 19px;">Let's just NOT mix topics in our commits, ok?</div><div style="color: #333333; font-family: Georgia, 'Times New Roman', 'Bitstream Charter', Times, serif; font-size: 13px; line-height: 19px;">K, THX bye!</div><div style="color: #333333; font-family: Georgia, 'Times New Roman', 'Bitstream Charter', Times, serif; font-size: 13px; line-height: 19px;">Happy Coding!</div></div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>Jay Bazuzi</div>
<div class='content'>
I also split each refactoring out in to a separate commit, and tag the description with &quot;REFACTOR: &quot;. When things go well, I take tiny, safe refactoring steps, commit each one separately, until the feature I&#39;m trying to write is easye to implement. My commit history then looks like this:<br /><br />    REFACTOR: Extract Method `X.Y()`<br />    REFACTOR: Rename `A` -&gt; `B`<br />    Implement feature &quot;Foo&quot;<br /><br />If you are looking for a specific deliberate behavior change, you can scan the history and look at only the non-REFACTOR commits. That commit is small and clear, because I have refactored ahead of time. <br /><br />If you ever see a behavior change under a REFACTOR tag, you know it was not deliberate - that I screwed up.</div>
</div>
<div class='comment'>
<div class='author'>Jay Bazuzi</div>
<div class='content'>
I&#39;ve tried to work this way for a long time, but wasn&#39;t ever able to articulate it as well as you have.<br /><br />Just 2 days ago I told a coworker to commit his change in two parts, and he looked at me blankly and asked &quot;Why?&quot;. I said &quot;Single-Responsibility Principle&quot; and got more blank. *sigh* </div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Authentication Error Connecting to Git on TFS]]></title>
    <link href="http://staxmanade.github.io/2013/06/authentication-error-connecting-to-git/"/>
    <updated>2013-06-20T10:46:00-07:00</updated>
    <id>http://staxmanade.github.io/2013/06/authentication-error-connecting-to-git</id>
    <content type="html"><![CDATA[<div class='post'>
<p>I’m throwing this out there since I couldn’t find much on this specific problem. #payingItForward</p>  <h4>Problem</h4>  <p>I struggled getting the git command line to authenticate with Git Team Foundation Service online.</p>  <p>My current environment is Windows 8, msysgit, with the git-credential-winstore tool installed. (Love that credential tool)</p>  <p>When I first tried to (push, fetch, or pull) from a newly created TFS Git repository I received git-credential-winstore authentication dialog, entered my credentials and received the following error,</p>  <blockquote>   <p>Failed to erase credential: Element not found      <br />fatal: Authentication failed</p> </blockquote>  <p>After googling that error I found this link <a href="http://blog.jennysjottings.co.uk/2013/01/20/github-glitch/">http://blog.jennysjottings.co.uk/2013/01/20/github-glitch/</a> who’s approach did not work in my case.</p>  <h4>Solution: Short Version</h4>  <ol>   <li>Log into your TFS account (online)</li>    <li>go to your account settings then credentials </li>    <li>setup the alternate login</li> </ol>  <h4>Solution: Long version</h4>  <ol>   <li>First go to the following link:&#160; <a href="http://tfs.visualstudio.com/en-us/learn/use-git-and-xcode-with-tfs.aspx" target="_blank">Use Git&#160; and XCode with TFS</a> </li>    <li>scroll down to the section titled:      <h4>Enable basic authentication for your account</h4>   </li>    <li>Follow those directions</li> </ol>  <h5>Hope this helps.</h5>  <p>Happy Git-ing!</p>  </div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git on Windows: Creating a Network Shared Central Repository.]]></title>
    <link href="http://staxmanade.github.io/2011/06/git-on-windows-creating-network-shared/"/>
    <updated>2011-06-18T10:15:00-07:00</updated>
    <id>http://staxmanade.github.io/2011/06/git-on-windows-creating-network-shared</id>
    <content type="html"><![CDATA[<div class='post'>
<p>I was doing some basic Git training for a customer this past week and they asked about how to setup their repositories to push/pull from a network share. I thought it would be simple and we spent a few minutes in class trying to accomplish it. We stopped trying in class and I took it as a homework assignment to figure it out before the next lesson. It was a little bit of a struggle to get this working for me, so I thought I’d throw this out there for any windows developers trying to do a similar thing.</p>  <p>&#160;</p>  <p>I tend to prefer the command line to any of the git UI tools (except when visualizing history, and diffing files). In this post I’m going to show how you can do it through a command line, but I’ll also show how you can do it with git gui which, in this case, is a few less steps.</p>  <p>&#160;</p>  <h3>How to push a local repository up to an (un-initialized) remote windows share.</h3>  <h5>&#160;</h5>  <h4>Command Line:</h4>  <p>I tend to run git within PowerShell, however the following set of commands <strong>cannot be run within the PowerShell</strong> prompt. If you figure out a way, I’d love to hear about it. And since I use the PowerShell prompt, I’m not sure how this would play out with the bash command.</p>  <p>Open a command prompt (cmd.exe) and follow the below steps to create a remote windows repository share.    <br /></p>  <p>CD into the context of your local repository. Say my repo was at “C:\Code\MyGitRepo1”.</p>  <blockquote>   <p>cd C:\Code\MyGitRepo1&#160; <br /></p> </blockquote>  <p>Next we’re going to change our current directory to the remote share location. </p>  <blockquote>   <p>Something I learned during this process is that cmd.exe doesn’t allow you to “cd” into a UNC network share path.</p> </blockquote>  <p>To get around not being allowed to “cd” into a UNC network share we’ll use the <a href="http://technet.microsoft.com/en-us/library/bb490978.aspx">pushd</a> command. The reason this works is because it is actually going to map a network drive to the network share location.</p>  <blockquote>   <p>pushd <a href="file://\\remoteServer\git\Share\Folder\Path">\\remoteServer\git\Share\Folder\Path</a></p> </blockquote>  <p>Now that we’re in the remote location we can create a bare git repository.</p>  <blockquote>   <p>mkdir MyGitRepo1      <br />cd MyGitRepo1       <br />git init --bare       <br /></p> </blockquote>  <p>Your remote empty repository has now been created. Let’s go back to our local repository</p>  <blockquote>   <p><font style="background-color: #ffffff">popd</font></p> </blockquote>  <p>popd will “CD” back to the previous location (“C:\Code\MyGitRepo1”) and also remove the network share the pushd command created above.</p>  <p>So we should be back in the context of our local git repo.</p>  <blockquote>   <p><font style="background-color: #ffffff">C:\Code\MyGitRepo1\ &gt;</font></p> </blockquote>  <p>&#160;</p>  <p>Now all we need to do is add the newly created remote bare repository to our local repo and push our code up.</p>  <p><strong>Notice the direction of the slashes in the path below (this stumped me for a bit)</strong>&#160;</p>  <blockquote>   <p>git remote add origin //remoteServer/git/Share/Folder/Path/MyGitRepo1      <br />git push origin master       <br /></p> </blockquote>  <p>Kind of a pain at the command prompt really, but it’s not something that’s done all that often.</p>  <h4>Using Git gui instead:</h4>  <p>Open up the GUI</p>  <blockquote>   <p><font style="background-color: #ffffff">git gui</font></p> </blockquote>  <p>Click the [Remote-&gt;Add] menu option to bring up the “Add Remote” dialog.</p>  <p><a href="http://lh3.ggpht.com/-ftWDdPbwLuU/TfzdIjeomCI/AAAAAAAAAPs/V7fp-tYQGTE/s1600-h/image%25255B3%25255D.png"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://lh5.ggpht.com/-2J7R5Ywqg5Q/TfzdKYd7u1I/AAAAAAAAAPw/RVRd1qA4Mwg/image_thumb%25255B1%25255D.png?imgmax=800" width="306" height="179" /></a></p>  <p>Enter the name for your remote “origin” is pretty typical for the central repository, but you can call this whatever you want. Then type the remote location. <strong>Notice the direction of the slashes.</strong></p>  <p><a href="http://lh4.ggpht.com/-rK0DGmJVatM/TfzdK_fEhyI/AAAAAAAAAP0/040v3iV28YU/s1600-h/image%25255B7%25255D.png"><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://lh6.ggpht.com/-2lkEQOqsj3I/TfzdLjmbWvI/AAAAAAAAAP4/6LZzJP94Cmk/image_thumb%25255B3%25255D.png?imgmax=800" width="414" height="305" /></a></p>  <p>Now you should be good to go.</p>  <p>&#160;</p>  <p>Hope this helps someone else, and if anyone knows of a better/easier way I’d love to hear it.</p>  </div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>Jason.Jarrett</div>
<div class='content'>
Thanks for the nice comment. In regards to  your question, I&#39;m afraid I&#39;m not familiar enough to be of help.<br /><br />You might take your question over to StackOverflow.com as there are some very smart people over there that might be able to help.<br /><br />Good Luck</div>
</div>
<div class='comment'>
<div class='author'>Djilali Tabbouche</div>
<div class='content'>
Hi Jason, thanks for your post.<br />I&#39;m using this exact setup to deploy applications to both linux and windows server.<br />No problem on linux using ssh and pushing to windows throuh network shares works fine but I have one issue with post-receive hooks: I use this hook to checkout the remote repository to the application directory and run configuration tasks and on windows, the git command use the local computer environment (git-dir and work-tree).<br />I&#39;ve tried every options without success.<br /><br />Any idea?</div>
</div>
</div>

]]></content>
  </entry>
  
</feed>
